author: inmysocks
core-version: >=5.1.0
created: 20171120062202197
dependents: 
description: A plugin to help create setup wizards or slideshows
modified: 20171120062202197
plugin-type: plugin
source: 
title: $:/plugins/inmysocks/WizardWizard
type: application/json
version: 0.0.2

{
    "tiddlers": {
        "$:/plugins/inmysocks/WizardWizard/Wizard Macro": {
            "tags": "$:/tags/Macro",
            "title": "$:/plugins/inmysocks/WizardWizard/Wizard Macro",
            "text": "\\define WizardTemp() $:/temp/Wizard/$(WizardName)$\n\n\\define WizardState() $:/state/Wizard/$(WizardName)$\n\n\\define EndFilter() [is[system]!is[system]]\n\n\\define FinishWizardButton()\n<$list\n    filter='[all[shadows+tiddlers]tag<WizardName>finish_button[True]]'\n>\n    <$transclude/>\n</$list>\n\\end\n\n\\define AliasEmptyMessage($FallBackName$)\n<$list\n    variable=Alias\n    filter='[is[current]get[caption]]'\n    emptyMessage='<$macrocall $name=\"showalias\" tid=<<ContainingTiddler>> alias=\"\"\"$FallBackName$\"\"\"/>'\n>\n    <$macrocall\n        $name=\"showalias\"\n        tid=<<ContainingTiddler>>\n        alias=<<Alias>>\n    />\n</$list>\n\\end\n\n\\define ForwardButtonCheck()\n<$set\n    name=ListSoFar\n    value=''\n>\n    <$list\n        filter='[{!!current_step}get[forward_conditions]]'\n        variable=FullList\n        emptyMessage=<<MakeForwardButton>>\n    >\n            <<InnerForwardButtonCheck>>\n    </$list>\n</$set>\n\\end\n\n\\define InnerForwardButtonCheck()\n<$set\n    name=CurrentFilter\n    filter='[<FullList>removeprefix<ListSoFar>splitbefore[;]removesuffix[;]]'\n    emptyValue='[is[system]!is[system]]'\n>\n    <$list\n        filter='[<CurrentFilter>prefix<EndFilter>]'\n        variable=dummy\n    >\n        <<MakeForwardButton>>\n    </$list>\n    <$set\n        name=ListSoFar\n        filter='[<ListSoFar>addsuffix<CurrentFilter>addsuffix[;]]'\n    >\n        <$list\n            filter=<<CurrentFilter>>\n            variable=dummy\n            emptyMessage=\"\"\"<$list\n                                filter='[<CurrentFilter>!prefix<EndFilter>]'\n                                variable=dummy\n                            >\n                                <$list\n                                    filter='[{!!current_step}get[unfinished_message]]'\n                                >\n                                    <$view\n                                        field='title'\n                                    />\n                                </$list>\n                            </$list>\"\"\"\n        >\n            <<InnerForwardButtonCheck>>\n        </$list>\n    </$set>\n</$set>\n\\end\n\n\\define MakeForwardButton()\n<$button class=wizard-forward-button>Next\n    <$action-setfield\n        $tiddler=<<WizardState>>\n        $field=current_step\n        $value=<<NextTid>>\n    />\n</$button>\n\\end\n\n\\define ConfigurationWizard(WizardName SortField:order class:wizard-default-class UseAlias:false)\n<div\n    class='$class$'\n>\n    <$vars\n        ContainingTiddler=<<currentTiddler>>\n        WizardName=\"\"\"$WizardName$\"\"\"\n    >\n        <$tiddler\n            tiddler=<<WizardState>>\n        >\n            <div\n                class=wizard-above-wizard-div\n            >\n                <$list\n                    filter=\"\"\"[all[shadows+tiddlers]tag[$WizardName$]above_wizard[True]nsort[$SortField$]]\"\"\"\n                    variable=AboveWizard\n                >\n                    <$transclude\n                        tiddler=<<AboveWizard>>\n                        mode=block\n                    />\n                </$list>\n            </div>\n            <$set\n                name=StepList\n                filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]]\"\"\"\n            >\n                <$list\n                    filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]first[]]\"\"\"\n                    variable=FirstTiddler\n                >\n                    <$list\n                        filter=\"\"\"[[True]prefix[$UseAlias$]]\"\"\"\n                        variable=dummy\n                    >\n                        <$list\n                            filter=\"\"\"[<currentTiddler>get[current_step]]\"\"\"\n                            emptyMessage=\"\"\"<$tiddler\n                                                tiddler=<<FirstTiddler>>\n                                            >\n                                                <$macrocall\n                                                    $name=AliasEmptyMessage\n                                                    FallBackName=<<FirstTiddler>>\n                                                />\n                                            </$tiddler>\"\"\"\n                        >\n                            <$macrocall\n                                $name=AliasEmptyMessage\n                                FallBackName=<<CurrentStepx>>\n                            />\n                        </$list>\n                    </$list>\n                    <h2\n                        class=wizard-step-count\n                    >\n                        Step\n                        <$list\n                            filter=\"\"\"[<currentTiddler>get[current_step]]\"\"\"\n                            variable=CurrentStep\n                            emptyMessage=1\n                        >\n                            <$count\n                                filter='[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]allbefore:include<CurrentStep>][<FirstTiddler>]'\n                            />\n                        </$list>\n                        of\n                        <$count\n                            filter=<<StepList>>\n                        />:\n                        <$list\n                            filter=\"\"\"[<currentTiddler>get[current_step]]\"\"\"\n                            emptyMessage='<$view tiddler=<<FirstTiddler>> field=caption><$view tiddler=<<FirstTiddler>> field=title/></$view>'\n                        >\n                            <$view\n                                field='caption'\n                            >\n                                <$view\n                                    field='title'\n                                />\n                            </$view>\n                        </$list>\n                    </h2>\n                    <$list\n                        filter=\"\"\"[<currentTiddler>get[current_step]]\"\"\"\n                        variable=CurrentStep\n                    >\n                        <span\n                            class=wizard-step-list\n                        >\n                            <$reveal\n                                type='nomatch'\n                                state='!!current_step'\n                                text=<<FirstTiddler>>\n                            >\n                                Jump to step:\n                            </$reveal>\n                            <$list filter='[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]allbefore<CurrentStep>]'>\n                                <$button class='tc-btn-invisible wizard-step-list-button'>\n                                    <$action-setfield\n                                        $tiddler=<<WizardState>>\n                                        $field=current_step\n                                        $value=<<currentTiddler>>\n                                    />\n                                    <$count\n                                        filter='[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]allbefore:include<currentTiddler>][<FirstTiddler>]'\n                                    />\n                                </$button>\n                            </$list>\n                        </span>\n                    </$list>\n                    <div\n                        class=wizard-slide-box\n                    >\n                        <$transclude\n                            tiddler={{!!current_step}}\n                            mode=block\n                        >\n                            <$transclude\n                                tiddler=<<FirstTiddler>>\n                                mode=block\n                            />\n                        </$transclude>\n                    </div>\n                    <br>\n                    <$set\n                        name=SecondTiddler\n                        filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]after<FirstTiddler>]\"\"\"\n                    >\n                        <$set\n                            name=NextTiddler\n                            filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]after{!!current_step}]\"\"\"\n                            emptyValue=<<SecondTiddler>>\n                        >\n                            <$set\n                                name=PreviousTiddler\n                                filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]before{!!current_step}]\"\"\"\n                            >\n                                <$list\n                                    filter=<<PreviousTiddler>>\n                                    variable=PreviousTid\n                                >\n                                    <$button class=wizard-back-button>Back\n                                        <$action-setfield\n                                            $tiddler=<<WizardState>>\n                                            $field=current_step\n                                            $value=<<PreviousTid>>\n                                        />\n                                    </$button>\n                                </$list>\n                                <$list\n                                    filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>!above_wizard[True]!finish_button[True]!below_wizard[True]nsort[$SortField$]last[]]\"\"\"\n                                    variable=LastTiddler\n                                >\n                                    <$reveal\n                                        type='nomatch'\n                                        state=\"\"\"!!current_step\"\"\"\n                                        text=<<LastTiddler>>\n                                    >\n                                        <$list\n                                            filter=<<NextTiddler>>\n                                            variable=NextTid\n                                        >\n                                            <<ForwardButtonCheck>>\n                                        </$list>\n                                    </$reveal>\n                                    <$reveal\n                                        type='match'\n                                        state=\"\"\"!!current_step\"\"\"\n                                        text=<<LastTiddler>>\n                                    >\n                                        <<FinishWizardButton>>\n                                    </$reveal>\n                                </$list>\n                            </$set>\n                        </$set>\n                    </$set>\n                </$list>\n            </$set>\n            <div\n                class=wizard-below-wizard-div\n            >\n                <$list\n                    filter=\"\"\"[all[shadows+tiddlers]tag<WizardName>below_wizard[True]nsort[$SortField$]]\"\"\"\n                    variable=BelowWizard\n                >\n                    <$transclude\n                        tiddler=<<BelowWizard>>\n                        mode=block\n                    />\n                </$list>\n            </div>\n        </$tiddler>\n    </$vars>\n</div>\n\\end\n\nThe simplest description for this is a slide show. You give a tag and then you can move forward and backward through a list of tiddlers with that tag.\n\nUsage:\n\nFirst go to [[$:/plugins/inmysocks/WizardWizard/Wizard Setup]] and set up your wizard. As part of that setup you will give your wizard a name, then anywhere you put `<<ConfigurationWizard WizardName>>` (replace `WizardName` with the name you chose) it will display your wizard.\n\n```\n<<ConfigurationWizard WizardName SortField class>>\n```\n\n|!~WizardName |The name of your wizard. Different wizards need different names. |\n|!~SortField |The field that is used to order your steps. Defaults to `order`. |\n|!class |An optional css class, see below for more information. |\n|!UseAlias |If set to `True` than the tiddler containing the wizard will show the caption of the current step instead of the containing tiddler title. If the step tiddler doesn't have a caption than the step tiddler title is used instead. Defaults to `false`. |\n\nIn the tiddlers for each step of the wizard you have access to some special helper macros. These macros only actually function in the wizard itself, so if you open up one of the tiddlers for a specific step these macros won't function as expected.\n\n*`<<WizardTemp>>` is a temporary tiddler for storing input in each step, so for example if you have `<$edit-text tiddler=<<WizardTemp>> field=name/>` in one step than you can access it in other places (like for the done button) by doing something like `<$tiddler tiddler=<<WizardTemp>>>{{!!name}}</$tiddler>`. Hopefully I will get better examples.\n*`<<WizardState>>` is a state tiddler for storing state information about the wizard. The name of the tiddler for the current step is stored in the `current_step` field of this tiddler. You can use it to store other state information or if you wish to manipulate the current step you can change the contents of the field. If you put anything other than the name of a tiddler that is part of the wizard as the `current_step` than clicking on the `Forward` button will bring you to the second step in the wizard.\n\n!!Making a finished button\n\nWhen you are on the last step the `Forward` button will not appear. Instead you can create a tiddler tagged with the same tag as everything else and put a button inside that tiddler with whatever you want to happen when you are finished with the wizard. Then give that tiddler the field `finish_button` with the contents `True` (this can be done using the [[$:/plugins/inmysocks/WizardWizard/Wizard Setup]]), then that button will be displayed in place of the forward button when you are on the last step.\n\nYou can make it something other than a button if you wish.\n\n!!Changing the appearance\n\nLook at [[$:/plugins/inmysocks/WizardWizard/stylesheets.tid]] for a stylesheet you can copy and edit to change the appearance.\n"
        },
        "$:/plugins/inmysocks/WizardWizard/Wizard Setup": {
            "title": "$:/plugins/inmysocks/WizardWizard/Wizard Setup",
            "text": "This is the setup for the wizard wizard!\n\nYou give a tag you want to use, then any tiddlers tagged with that tag will be part of the wizard. Tiddlers can be set to display so that you can page through them. You can also set a tiddler to display above the others as an unchanging header, or below everything else as a footer.\n\nFirst, enter the tag you want to use:\n<$edit-text tiddler='$:/temp/Wizard Setup' field='wizard_name' class='tc-edit-texteditor'/>\n\nNow check the boxes next to the tiddlers you want to use as headers or footers (if any) and set the order. If you have a button you wish to use as the finish button (the button that appears instead of the `Forward` button when on the last step) put it in a tiddler tagged with the same tag and check the `Finished Button` box next to that tiddler in the table below.\n\nHere are the tiddlers that currently have the tag:\n\n<table\n    style='width:100%'\n>\n    <tr>\n        <th>\n            Header\n        </th>\n        <th>\n            Footer\n        </th>\n        <th>\n            Finished Button\n        </th>\n        <th>\n            Tiddler Name\n        </th>\n        <th>\n            Order\n        </th>\n    </tr>\n    <$list\n        filter='[tag{$:/temp/Wizard Setup!!wizard_name}]'\n        emptyMessage='There are no tiddlers with that tag.'\n    >\n        <tr>\n            <td>\n                <$checkbox\n                    field='above_wizard'\n                    checked='True'\n                    unchecked=''\n                />\n            </td>\n            <td>\n                <$checkbox\n                    field='below_wizard'\n                    checked='True'\n                    unchecked=''\n                />\n            </td>\n            <td>\n                <$checkbox\n                    field='finish_button'\n                    checked='True'\n                    unchecked=''\n                />\n            </td>\n            <td>\n                <$view\n                    field='caption'\n                >\n                    <$view\n                        field='title'\n                    />\n                </$view>\n            </td>\n            <td>\n                <$edit-text\n                    field='order'\n                    class='tc-edit-texteditor'\n                />\n            </td>\n        </tr>\n    </$list>\n</table>\n"
        },
        "$:/plugins/inmysocks/WizardWizard/stylesheets.tid": {
            "tags": "$:/tags/Stylesheet",
            "title": "$:/plugins/inmysocks/WizardWizard/stylesheets.tid",
            "text": "/*\nYou can use this as a template to make new classes to change how your wizard looks and then use the class attribute when calling the macro and specifying your new class.\nTo do this copy this tiddler and in the new copy replace everywhere it says wizard-default-class with whatever you want to name your class.\n\nSome useful bits:\n\nto hide a section (for example if you don't wan't to display the buttons to jump to a section) find the part in your tiddler for that section (in the example it would be .wizard-default-class .wizard-step-list) and then put\n\ndisplay:none;\n\ninside it. Inside means between the opening and closing curly braces. So you end up with\n\n.wizard-default-class .wizard-step-list {\ndisplay:none;\n}\n\n\nCommon things to change:\n\nfont-size - changes the size of the font. You give numbers followed by px, example: font-size:12px;\n\ncolor - changes the font color. Give a word like 'blue' or a hex value like '#ffffff'\n\nbackground-color - changes the background color, same inputs as color\n\nif you want more search online for css properties.\n*/\n\n/*\nThis gets applied to everything in the wizard\n*/\n.wizard-default-class {\n\n}\n\n/*\nThis gets applied to the content of the tiddlers with the field above_wizard set to True\n*/\n.wizard-default-class .wizard-above-wizard-div {\n\n}\n\n/*\nThis gets applied to the content of the tiddlers with the field below_wizard set to True\n*/\n.wizard-default-class .wizard-below-wizard-div {\n\n}\n\n/*\nThis gets applied to the 'Step 1 of 6: Welcome!' part\n*/\n.wizard-default-class .wizard-step-count {\n\n}\n\n/*\nThis gets applied to the list showing the numbers to go to previous steps\n*/\n.wizard-default-class .wizard-step-list {\n\n}\n\n/*\nThis gets applied to the buttons themselves (the 1, 2, etc. that you can click on)\n*/\n.wizard-default-class .wizard-step-list .wizard-step-list-button {\n    color:#5778d8;\n}\n\n/*\nThis is for the same buttons, but it takes effect when you hover over them.\n*/\n.wizard-default-class .wizard-step-list .wizard-step-list-button:hover {\n    text-decoration: underline;\n}\n\n/*\nThis is the box around the content that changes for each step.\n*/\n.wizard-default-class .wizard-slide-box {\n    border:solid lightgrey 1px;\n    padding:10px;\n    box-shadow:5px 5px 5px #888888;\n}\n\n/*\nThis gets applied to the back button\n*/\n.wizard-default-class .wizard-back-button {\n\n}\n\n/*\nThis gets applied to the forward button\n*/\n.wizard-default-class .wizard-forward-button {\n\n}\n"
        }
    }
}